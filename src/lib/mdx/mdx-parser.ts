import fs from 'node:fs'
import path from 'node:path'
import { EntryType } from '@/v3/features/pages/repository/types'
import { compileSync, runSync } from '@mdx-js/mdx'
import { globSync } from 'glob'
import matter from 'gray-matter'
import * as runtime from 'react/jsx-runtime'
import { assertServerOnly } from '../env'
import type { MDXEntryMetadata, MDXIndex } from './types'

assertServerOnly()

export const CMS_PATH = path.resolve(path.join(process.cwd(), 'content'))

export function parseMdxComponent(fileContents: string) {
  const code = compileSync(fileContents, {
    outputFormat: 'function-body',
  })
  // biome-ignore lint/suspicious/noExplicitAny: <explanation>
  const module = runSync(code, { ...(runtime as any), baseUrl: import.meta.url })
  return module.default
}

export function parseMdxFrontmatter<T>(fileContents: string): T {
  const parts = parseMdxParts(fileContents)
  const { data } = matter(parts.frontMatter)

  return data as T
}

export function parseMdxParts(fileContents: string): { frontMatter: string; body: string } {
  const parts = fileContents.split(/^---$/m, 3)

  if (parts.length < 3) {
    return { frontMatter: '', body: parts[0] }
  }

  return { frontMatter: `---\n${parts[1].trim()}\n---\n\n`, body: parts[2] }
}

export function generateMdxIndex(): void {
  const indexFile = path.join(process.cwd(), 'src', 'mdx-cache.json')
  const files = {
    [EntryType.Page]: globSync('./pages/**/*.mdx', { cwd: CMS_PATH }),
    [EntryType.Article]: globSync('./articles/**/*.mdx', { cwd: CMS_PATH }),
  }
  const index: MDXIndex['index'] = {
    [EntryType.Page]: [],
    [EntryType.Article]: [],
  }

  for (const [_pageType, pageFiles] of Object.entries(files)) {
    const pageType = _pageType as EntryType
    for (const file of pageFiles) {
      const filePath = path.join(CMS_PATH, file)
      const fileStats = fs.statSync(filePath)
      const fileContents = fs.readFileSync(filePath, 'utf8')
      const meta = parseMdxFrontmatter<MDXEntryMetadata>(fileContents)
      index[pageType]?.push({
        path: filePath,
        title: meta.title,
        slug: meta.slug,
        createdAt: fileStats.birthtime.toISOString(),
        modifiedAt: fileStats.mtime.toISOString(),
        isAutogenerated: meta.isAutogenerated,
      })
    }
  }

  const indexData: MDXIndex = {
    index,
    modifiedAt: new Date().toISOString(),
  }

  fs.writeFileSync(indexFile, JSON.stringify(indexData, null, 2))
}
